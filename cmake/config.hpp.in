#pragma once

// Generated configuration header for trlc-platform
// This file is automatically generated by CMake - do not edit manually

#define TRLC_PLATFORM_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define TRLC_PLATFORM_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define TRLC_PLATFORM_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define TRLC_PLATFORM_VERSION_STRING "@PROJECT_VERSION@"

// Compiler information
#define TRLC_CONFIG_COMPILER_TYPE "@TRLC_COMPILER_TYPE@"
#define TRLC_CONFIG_COMPILER_VERSION "@TRLC_COMPILER_VERSION@"
#define TRLC_CONFIG_COMPILER_MAJOR @TRLC_COMPILER_MAJOR@
#define TRLC_CONFIG_COMPILER_MINOR @TRLC_COMPILER_MINOR@
#define TRLC_CONFIG_COMPILER_PATCH @TRLC_COMPILER_PATCH@

// Platform information
#define TRLC_CONFIG_PLATFORM_TYPE "@TRLC_PLATFORM_TYPE@"
#define TRLC_CONFIG_PLATFORM_VARIANT "@TRLC_PLATFORM_VARIANT@"
#define TRLC_CONFIG_ARCHITECTURE_TYPE "@TRLC_ARCHITECTURE_TYPE@"
#define TRLC_CONFIG_KERNEL_FAMILY "@TRLC_KERNEL_FAMILY@"
#define TRLC_CONFIG_ENVIRONMENT_TYPE "@TRLC_ENVIRONMENT_TYPE@"
#define TRLC_CONFIG_POINTER_SIZE @TRLC_POINTER_SIZE@
#define TRLC_CONFIG_BYTE_ORDER "@TRLC_BYTE_ORDER@"

// C++ Standard information
#define TRLC_CONFIG_CPP_STANDARD "@TRLC_CPP_STANDARD@"
#define TRLC_CONFIG_CPP_VERSION @TRLC_CPP_VERSION@L

// Build configuration options
#cmakedefine01 TRLC_PLATFORM_ENABLE_ASSERTS
#cmakedefine01 TRLC_PLATFORM_ENABLE_EXPERIMENTAL
#cmakedefine01 TRLC_PLATFORM_FORCE_PORTABLE

// Language feature detection
#cmakedefine01 TRLC_HAS_EXCEPTIONS
#cmakedefine01 TRLC_HAS_RTTI
#cmakedefine01 TRLC_HAS_THREADS
#cmakedefine01 TRLC_HAS_ATOMIC

// C++ standard feature detection
#cmakedefine01 TRLC_HAS_STRUCTURED_BINDINGS
#cmakedefine01 TRLC_HAS_IF_CONSTEXPR
#cmakedefine01 TRLC_HAS_CONCEPTS
#cmakedefine01 TRLC_HAS_RANGES

// Compiler capability detection
#cmakedefine01 TRLC_HAS_BUILTIN_FUNCTIONS
#cmakedefine01 TRLC_HAS_BUILTIN_EXPECT
#cmakedefine01 TRLC_HAS_BUILTIN_UNREACHABLE
#cmakedefine01 TRLC_HAS_ATTRIBUTE_DETECTION
#cmakedefine01 TRLC_HAS_CPP_ATTRIBUTE_DETECTION
#cmakedefine01 TRLC_COMPILER_HAS_COLOR_DIAGNOSTICS
#cmakedefine01 TRLC_COMPILER_HAS_BUILTIN_ATTRIBUTES
#cmakedefine01 TRLC_HAS_INLINE_ASM

// Platform capability detection
#cmakedefine01 TRLC_HAS_POSIX_API
#cmakedefine01 TRLC_HAS_WIN32_API
#cmakedefine01 TRLC_CASE_SENSITIVE_FILESYSTEM

// Runtime feature detection (compile-time availability)
#cmakedefine01 TRLC_HAS_SSE_SUPPORT
#cmakedefine01 TRLC_HAS_SSE2_SUPPORT
#cmakedefine01 TRLC_HAS_AVX_SUPPORT
#cmakedefine01 TRLC_HAS_AVX2_SUPPORT
#cmakedefine01 TRLC_HAS_NEON_SUPPORT

// Build system information
#define TRLC_CONFIG_CMAKE_VERSION "@CMAKE_VERSION@"
#define TRLC_CONFIG_CMAKE_GENERATOR "@CMAKE_GENERATOR@"
#define TRLC_CONFIG_BUILD_TYPE "@CMAKE_BUILD_TYPE@"

// Host system information
#define TRLC_CONFIG_HOST_SYSTEM "@CMAKE_HOST_SYSTEM@"
#define TRLC_CONFIG_HOST_SYSTEM_NAME "@CMAKE_HOST_SYSTEM_NAME@"
#define TRLC_CONFIG_HOST_SYSTEM_VERSION "@CMAKE_HOST_SYSTEM_VERSION@"
#define TRLC_CONFIG_HOST_SYSTEM_PROCESSOR "@CMAKE_HOST_SYSTEM_PROCESSOR@"

// Target system information (for cross-compilation)
#define TRLC_CONFIG_SYSTEM "@CMAKE_SYSTEM@"
#define TRLC_CONFIG_SYSTEM_NAME "@CMAKE_SYSTEM_NAME@"
#define TRLC_CONFIG_SYSTEM_VERSION "@CMAKE_SYSTEM_VERSION@"
#define TRLC_CONFIG_SYSTEM_PROCESSOR "@CMAKE_SYSTEM_PROCESSOR@"

// Library configuration validation
namespace trlc {
namespace platform {
namespace config {

// Compile-time configuration validation
static_assert(TRLC_CONFIG_POINTER_SIZE == sizeof(void*), 
              "Detected pointer size does not match actual pointer size");

static_assert(TRLC_PLATFORM_VERSION_MAJOR >= 1, 
              "Invalid version configuration");

// Configuration summary structure for runtime inspection
struct ConfigInfo {
    static constexpr int version_major = TRLC_PLATFORM_VERSION_MAJOR;
    static constexpr int version_minor = TRLC_PLATFORM_VERSION_MINOR;
    static constexpr int version_patch = TRLC_PLATFORM_VERSION_PATCH;
    static constexpr const char* version_string = TRLC_PLATFORM_VERSION_STRING;
    
    static constexpr const char* compiler_type = TRLC_CONFIG_COMPILER_TYPE;
    static constexpr const char* compiler_version = TRLC_CONFIG_COMPILER_VERSION;
    
    static constexpr const char* platform_type = TRLC_CONFIG_PLATFORM_TYPE;
    static constexpr const char* architecture_type = TRLC_CONFIG_ARCHITECTURE_TYPE;
    
    static constexpr bool has_exceptions = TRLC_HAS_EXCEPTIONS;
    static constexpr bool has_rtti = TRLC_HAS_RTTI;
    static constexpr bool has_threads = TRLC_HAS_THREADS;
    
    static constexpr bool enable_asserts = TRLC_PLATFORM_ENABLE_ASSERTS;
    static constexpr bool enable_experimental = TRLC_PLATFORM_ENABLE_EXPERIMENTAL;
    static constexpr bool force_portable = TRLC_PLATFORM_FORCE_PORTABLE;
};

} // namespace config
} // namespace platform
} // namespace trlc
