# CheckPlatform.cmake - Platform detection module for trlc-platform

include_guard(GLOBAL)

# Function to detect platform and operating system
function(trlc_detect_platform)
    message(STATUS "Detecting platform information...")
    
    # Initialize variables
    set(TRLC_PLATFORM_TYPE "unknown")
    set(TRLC_PLATFORM_VARIANT "unknown")
    set(TRLC_ARCHITECTURE_TYPE "unknown")
    set(TRLC_KERNEL_FAMILY "unknown")
    set(TRLC_ENVIRONMENT_TYPE "desktop")
    set(TRLC_PLATFORM_NAME "Unknown Platform")

    # Detect operating system using CMAKE variables
    if(WIN32)
        set(TRLC_PLATFORM_TYPE "windows")
        set(TRLC_KERNEL_FAMILY "nt")
        set(TRLC_PLATFORM_NAME "Microsoft Windows")
        
        # Check for specific Windows versions using CMAKE_SYSTEM_VERSION
        if(CMAKE_SYSTEM_VERSION)
            if(CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL "10.0")
                set(TRLC_PLATFORM_VARIANT "windows_10_11")
                message(STATUS "Detected Windows 10/11")
            elseif(CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL "6.3")
                set(TRLC_PLATFORM_VARIANT "windows_8_1")
                message(STATUS "Detected Windows 8.1")
            elseif(CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL "6.2")
                set(TRLC_PLATFORM_VARIANT "windows_8")
                message(STATUS "Detected Windows 8")
            elseif(CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL "6.1")
                set(TRLC_PLATFORM_VARIANT "windows_7")
                message(STATUS "Detected Windows 7")
            else()
                set(TRLC_PLATFORM_VARIANT "windows_legacy")
                message(STATUS "Detected legacy Windows version")
            endif()
        else()
            set(TRLC_PLATFORM_VARIANT "windows_generic")
        endif()
        
        # Heuristic for environment detection on Windows
        if(CMAKE_SYSTEM_VERSION AND CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL "10.0")
            # Check for Windows Server vs Desktop
            if(DEFINED ENV{PROCESSOR_ARCHITECTURE} AND "$ENV{PROCESSOR_ARCHITECTURE}" STREQUAL "EM64T")
                set(TRLC_ENVIRONMENT_TYPE "server")
            else()
                set(TRLC_ENVIRONMENT_TYPE "desktop")
            endif()
        endif()
        
    elseif(APPLE)
        set(TRLC_KERNEL_FAMILY "unix")
        set(TRLC_PLATFORM_NAME "Apple Platform")
        
        if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
            set(TRLC_PLATFORM_TYPE "macos")
            set(TRLC_PLATFORM_VARIANT "macos")
            set(TRLC_PLATFORM_NAME "Apple macOS")
            set(TRLC_ENVIRONMENT_TYPE "desktop")
            message(STATUS "Detected macOS (Darwin)")
        elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
            set(TRLC_PLATFORM_TYPE "ios")
            set(TRLC_PLATFORM_VARIANT "ios")
            set(TRLC_PLATFORM_NAME "Apple iOS")
            set(TRLC_ENVIRONMENT_TYPE "mobile")
            message(STATUS "Detected iOS")
        elseif(CMAKE_SYSTEM_NAME STREQUAL "watchOS")
            set(TRLC_PLATFORM_TYPE "watchos")
            set(TRLC_PLATFORM_VARIANT "watchos")
            set(TRLC_PLATFORM_NAME "Apple watchOS")
            set(TRLC_ENVIRONMENT_TYPE "embedded")
            message(STATUS "Detected watchOS")
        elseif(CMAKE_SYSTEM_NAME STREQUAL "tvOS")
            set(TRLC_PLATFORM_TYPE "tvos")
            set(TRLC_PLATFORM_VARIANT "tvos")
            set(TRLC_PLATFORM_NAME "Apple tvOS")
            set(TRLC_ENVIRONMENT_TYPE "embedded")
            message(STATUS "Detected tvOS")
        else()
            set(TRLC_PLATFORM_TYPE "apple_unknown")
            set(TRLC_PLATFORM_VARIANT "apple_unknown")
            message(STATUS "Detected unknown Apple platform: ${CMAKE_SYSTEM_NAME}")
        endif()
        
    elseif(UNIX)
        set(TRLC_KERNEL_FAMILY "unix")
        
        if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
            set(TRLC_PLATFORM_TYPE "linux")
            set(TRLC_PLATFORM_NAME "Linux")
            
            # Try to detect Linux distribution using /etc/os-release
            if(EXISTS "/etc/os-release")
                file(STRINGS "/etc/os-release" OS_RELEASE_CONTENT)
                set(DISTRO_ID "linux_generic")
                set(DISTRO_NAME "Generic Linux")
                
                foreach(line ${OS_RELEASE_CONTENT})
                    # Extract ID field
                    if(line MATCHES "^ID=(.+)")
                        string(REGEX REPLACE "\"" "" DISTRO_ID "${CMAKE_MATCH_1}")
                    endif()
                    # Extract NAME field for better description
                    if(line MATCHES "^NAME=(.+)")
                        string(REGEX REPLACE "\"" "" DISTRO_NAME "${CMAKE_MATCH_1}")
                    endif()
                endforeach()
                
                # Map distribution IDs to our variants
                if(DISTRO_ID STREQUAL "ubuntu")
                    set(TRLC_PLATFORM_VARIANT "ubuntu")
                    set(TRLC_PLATFORM_NAME "Ubuntu Linux")
                elseif(DISTRO_ID STREQUAL "debian")
                    set(TRLC_PLATFORM_VARIANT "debian")
                    set(TRLC_PLATFORM_NAME "Debian Linux")
                elseif(DISTRO_ID MATCHES "rhel|centos|fedora|rocky|alma")
                    set(TRLC_PLATFORM_VARIANT "redhat")
                    set(TRLC_PLATFORM_NAME "Red Hat Family Linux")
                elseif(DISTRO_ID STREQUAL "arch")
                    set(TRLC_PLATFORM_VARIANT "arch")
                    set(TRLC_PLATFORM_NAME "Arch Linux")
                elseif(DISTRO_ID STREQUAL "alpine")
                    set(TRLC_PLATFORM_VARIANT "alpine")
                    set(TRLC_PLATFORM_NAME "Alpine Linux")
                elseif(DISTRO_ID STREQUAL "opensuse" OR DISTRO_ID STREQUAL "sles")
                    set(TRLC_PLATFORM_VARIANT "suse")
                    set(TRLC_PLATFORM_NAME "SUSE Linux")
                else()
                    set(TRLC_PLATFORM_VARIANT "linux_generic")
                    set(TRLC_PLATFORM_NAME "Generic Linux")
                endif()
                
                message(STATUS "Detected Linux distribution: ${DISTRO_NAME}")
            else()
                set(TRLC_PLATFORM_VARIANT "linux_generic")
                message(STATUS "Detected Linux (generic - no /etc/os-release)")
            endif()
            
            # Check if running in Android environment
            if(ANDROID)
                set(TRLC_PLATFORM_TYPE "android")
                set(TRLC_PLATFORM_VARIANT "android")
                set(TRLC_PLATFORM_NAME "Android")
                set(TRLC_ENVIRONMENT_TYPE "mobile")
                message(STATUS "Detected Android environment")
            else()
                # Heuristic for server vs desktop on Linux
                if(EXISTS "/usr/bin/systemctl")
                    # Check for desktop environment indicators
                    if(DEFINED ENV{DISPLAY} OR DEFINED ENV{WAYLAND_DISPLAY} OR EXISTS "/usr/bin/gnome-session")
                        set(TRLC_ENVIRONMENT_TYPE "desktop")
                    else()
                        set(TRLC_ENVIRONMENT_TYPE "server")
                    endif()
                endif()
            endif()
            
        elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
            set(TRLC_PLATFORM_TYPE "freebsd")
            set(TRLC_PLATFORM_VARIANT "freebsd")
            set(TRLC_PLATFORM_NAME "FreeBSD")
            message(STATUS "Detected FreeBSD")
            
        elseif(CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
            set(TRLC_PLATFORM_TYPE "openbsd")
            set(TRLC_PLATFORM_VARIANT "openbsd")
            set(TRLC_PLATFORM_NAME "OpenBSD")
            message(STATUS "Detected OpenBSD")
            
        elseif(CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
            set(TRLC_PLATFORM_TYPE "netbsd")
            set(TRLC_PLATFORM_VARIANT "netbsd")
            set(TRLC_PLATFORM_NAME "NetBSD")
            message(STATUS "Detected NetBSD")
            
        elseif(CMAKE_SYSTEM_NAME STREQUAL "DragonFly")
            set(TRLC_PLATFORM_TYPE "dragonfly")
            set(TRLC_PLATFORM_VARIANT "dragonfly")
            set(TRLC_PLATFORM_NAME "DragonFly BSD")
            message(STATUS "Detected DragonFly BSD")
            
        else()
            set(TRLC_PLATFORM_TYPE "unix_unknown")
            set(TRLC_PLATFORM_VARIANT "unix_unknown")
            set(TRLC_PLATFORM_NAME "Unknown Unix-like")
            message(STATUS "Detected unknown Unix-like system: ${CMAKE_SYSTEM_NAME}")
        endif()
        
    else()
        set(TRLC_PLATFORM_TYPE "unknown")
        set(TRLC_PLATFORM_VARIANT "unknown")
        set(TRLC_KERNEL_FAMILY "unknown")
        set(TRLC_PLATFORM_NAME "Unknown Platform")
        message(WARNING "Unknown platform detected")
    endif()

    # Detect architecture using CMAKE_SYSTEM_PROCESSOR
    message(STATUS "Detecting architecture: ${CMAKE_SYSTEM_PROCESSOR}")
    
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86_64|AMD64|amd64)$")
        set(TRLC_ARCHITECTURE_TYPE "x86_64")
        set(TRLC_POINTER_SIZE 8)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(i386|i586|i686|x86)$")
        set(TRLC_ARCHITECTURE_TYPE "x86")
        set(TRLC_POINTER_SIZE 4)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64)$")
        set(TRLC_ARCHITECTURE_TYPE "arm64")
        set(TRLC_POINTER_SIZE 8)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
        set(TRLC_ARCHITECTURE_TYPE "arm")
        set(TRLC_POINTER_SIZE 4)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(mips64|mips64el)$")
        set(TRLC_ARCHITECTURE_TYPE "mips64")
        set(TRLC_POINTER_SIZE 8)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(mips|mipsel)$")
        set(TRLC_ARCHITECTURE_TYPE "mips")
        set(TRLC_POINTER_SIZE 4)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(ppc64|powerpc64|ppc64le)$")
        set(TRLC_ARCHITECTURE_TYPE "powerpc64")
        set(TRLC_POINTER_SIZE 8)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(ppc|powerpc)$")
        set(TRLC_ARCHITECTURE_TYPE "powerpc")
        set(TRLC_POINTER_SIZE 4)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(riscv64|riscv)$")
        set(TRLC_ARCHITECTURE_TYPE "riscv64")
        set(TRLC_POINTER_SIZE 8)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^riscv32$")
        set(TRLC_ARCHITECTURE_TYPE "riscv32")
        set(TRLC_POINTER_SIZE 4)
    else()
        set(TRLC_ARCHITECTURE_TYPE "unknown")
        set(TRLC_POINTER_SIZE 0)
        message(WARNING "Unknown architecture: ${CMAKE_SYSTEM_PROCESSOR}")
    endif()

    # Detect byte order
    include(TestBigEndian)
    test_big_endian(IS_BIG_ENDIAN)
    if(IS_BIG_ENDIAN)
        set(TRLC_BYTE_ORDER "big_endian")
    else()
        set(TRLC_BYTE_ORDER "little_endian")
    endif()

    # Set cache variables
    set(TRLC_PLATFORM_TYPE "${TRLC_PLATFORM_TYPE}" CACHE STRING "Detected platform type")
    set(TRLC_PLATFORM_VARIANT "${TRLC_PLATFORM_VARIANT}" CACHE STRING "Detected platform variant")
    set(TRLC_PLATFORM_NAME "${TRLC_PLATFORM_NAME}" CACHE STRING "Detected platform name")
    set(TRLC_ARCHITECTURE_TYPE "${TRLC_ARCHITECTURE_TYPE}" CACHE STRING "Detected architecture type")
    set(TRLC_KERNEL_FAMILY "${TRLC_KERNEL_FAMILY}" CACHE STRING "Detected kernel family")
    set(TRLC_ENVIRONMENT_TYPE "${TRLC_ENVIRONMENT_TYPE}" CACHE STRING "Detected environment type")
    set(TRLC_POINTER_SIZE "${TRLC_POINTER_SIZE}" CACHE STRING "Pointer size in bytes")
    set(TRLC_BYTE_ORDER "${TRLC_BYTE_ORDER}" CACHE STRING "Byte order")

    # Set parent scope variables
    set(TRLC_PLATFORM_TYPE "${TRLC_PLATFORM_TYPE}" PARENT_SCOPE)
    set(TRLC_PLATFORM_VARIANT "${TRLC_PLATFORM_VARIANT}" PARENT_SCOPE)
    set(TRLC_PLATFORM_NAME "${TRLC_PLATFORM_NAME}" PARENT_SCOPE)
    set(TRLC_ARCHITECTURE_TYPE "${TRLC_ARCHITECTURE_TYPE}" PARENT_SCOPE)
    set(TRLC_KERNEL_FAMILY "${TRLC_KERNEL_FAMILY}" PARENT_SCOPE)
    set(TRLC_ENVIRONMENT_TYPE "${TRLC_ENVIRONMENT_TYPE}" PARENT_SCOPE)
    set(TRLC_POINTER_SIZE "${TRLC_POINTER_SIZE}" PARENT_SCOPE)
    set(TRLC_BYTE_ORDER "${TRLC_BYTE_ORDER}" PARENT_SCOPE)

    # Informative status messages
    message(STATUS "Platform: ${TRLC_PLATFORM_NAME} (${TRLC_PLATFORM_VARIANT})")
    message(STATUS "Architecture: ${TRLC_ARCHITECTURE_TYPE} (${TRLC_POINTER_SIZE}-byte pointers)")
    message(STATUS "Byte order: ${TRLC_BYTE_ORDER}")
    message(STATUS "Environment: ${TRLC_ENVIRONMENT_TYPE}")
endfunction()

# Function to check platform capabilities
function(trlc_check_platform_capabilities)
    # Check for POSIX compliance
    if(TRLC_KERNEL_FAMILY STREQUAL "unix")
        set(TRLC_HAS_POSIX_API TRUE CACHE BOOL "Platform has POSIX API")
        set(TRLC_HAS_WIN32_API FALSE CACHE BOOL "Platform has Win32 API")
    elseif(TRLC_KERNEL_FAMILY STREQUAL "nt")
        set(TRLC_HAS_POSIX_API FALSE CACHE BOOL "Platform has POSIX API")
        set(TRLC_HAS_WIN32_API TRUE CACHE BOOL "Platform has Win32 API")
    else()
        set(TRLC_HAS_POSIX_API FALSE CACHE BOOL "Platform has POSIX API")
        set(TRLC_HAS_WIN32_API FALSE CACHE BOOL "Platform has Win32 API")
    endif()

    # Check filesystem capabilities
    if(TRLC_PLATFORM_TYPE STREQUAL "windows")
        set(TRLC_CASE_SENSITIVE_FILESYSTEM FALSE CACHE BOOL "Filesystem is case sensitive")
    else()
        set(TRLC_CASE_SENSITIVE_FILESYSTEM TRUE CACHE BOOL "Filesystem is case sensitive")
    endif()

    message(DEBUG "Platform capabilities checked")
endfunction()
