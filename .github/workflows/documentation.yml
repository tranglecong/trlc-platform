name: Documentation

on:
  push:
    branches: [ main ]
    paths: 
      - 'include/**'
      - 'docs/**'
      - 'README.md'
      - 'Doxyfile'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'include/**'
      - 'docs/**'
      - 'README.md'
      - 'Doxyfile'
  workflow_dispatch:

# Permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  #============================================================================
  # Generate Documentation
  #============================================================================
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git-based version info

    - name: Install documentation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          doxygen \
          graphviz \
          plantuml \
          texlive-latex-base \
          texlive-latex-extra \
          texlive-fonts-recommended

    - name: Verify documentation tools
      run: |
        echo "📋 Documentation Tool Versions:"
        echo "  Doxygen: $(doxygen --version)"
        echo "  Graphviz: $(dot -V 2>&1 | head -1)"
        echo "  PlantUML: $(plantuml -version 2>&1 | head -1 || echo 'Not available')"

    - name: Generate API documentation
      run: |
        echo "🔧 Generating comprehensive API documentation..."
        
        # Ensure output directory exists
        mkdir -p docs/generated
        
        # Run documentation generation
        ./generate_docs.sh --clean
        
        # Validate documentation was generated successfully
        if [ ! -f "docs/generated/html/index.html" ]; then
          echo "❌ Documentation generation failed - index.html not found"
          exit 1
        fi
        
        # Count generated files
        html_files=$(find docs/generated/html -name "*.html" | wc -l)
        css_files=$(find docs/generated/html -name "*.css" | wc -l)
        js_files=$(find docs/generated/html -name "*.js" | wc -l)
        
        echo "✅ Documentation generated successfully:"
        echo "  HTML files: $html_files"
        echo "  CSS files:  $css_files"
        echo "  JS files:   $js_files"

    - name: Validate documentation quality
      run: |
        echo "🔍 Validating documentation quality..."
        
        # Check for Doxygen warnings in the log
        if [ -f "docs/generated/doxygen_warnings.log" ]; then
          warning_count=$(wc -l < docs/generated/doxygen_warnings.log || echo 0)
          if [ "$warning_count" -gt 0 ]; then
            echo "⚠️  Found $warning_count Doxygen warnings:"
            head -20 docs/generated/doxygen_warnings.log
          else
            echo "✅ No Doxygen warnings found"
          fi
        fi
        
        # Check for undocumented APIs
        undoc_count=$(grep -r "has no documentation" docs/generated/ 2>/dev/null | wc -l || echo 0)
        if [ "$undoc_count" -gt 0 ]; then
          echo "⚠️  Found $undoc_count undocumented APIs"
        else
          echo "✅ All APIs are documented"
        fi
        
        # Validate critical pages exist
        critical_pages=(
          "docs/generated/html/index.html"
          "docs/generated/html/modules.html"
          "docs/generated/html/annotated.html"
          "docs/generated/html/files.html"
        )
        
        for page in "${critical_pages[@]}"; do
          if [ -f "$page" ]; then
            echo "✅ Critical page exists: $(basename $page)"
          else
            echo "❌ Missing critical page: $(basename $page)"
            exit 1
          fi
        done

    - name: Create documentation summary
      run: |
        cat > docs/generated/html/build-info.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>TRLC Platform Documentation Build Info</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .info-box { background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .success { color: #28a745; }
                .warning { color: #ffc107; }
            </style>
        </head>
        <body>
            <h1>🚀 TRLC Platform Documentation</h1>
            <div class="info-box">
                <h2>📋 Build Information</h2>
                <ul>
                    <li><strong>Generated:</strong> $(date -u)</li>
                    <li><strong>Git Commit:</strong> ${{ github.sha }}</li>
                    <li><strong>Git Branch:</strong> ${{ github.ref_name }}</li>
                    <li><strong>Workflow:</strong> ${{ github.workflow }}</li>
                    <li><strong>Build #:</strong> ${{ github.run_number }}</li>
                </ul>
            </div>
            
            <div class="info-box">
                <h2>📚 Documentation Highlights</h2>
                <ul>
                    <li class="success">✅ Complete API reference for all public functions</li>
                    <li class="success">✅ Detailed parameter and return value documentation</li>
                    <li class="success">✅ Comprehensive code examples and usage patterns</li>
                    <li class="success">✅ Cross-references between related functions</li>
                    <li class="success">✅ Platform and compiler compatibility information</li>
                    <li class="success">✅ Performance characteristics and thread safety notes</li>
                </ul>
            </div>
            
            <div class="info-box">
                <h2>🔗 Quick Navigation</h2>
                <ul>
                    <li><a href="index.html">📖 Main Documentation</a></li>
                    <li><a href="modules.html">🗂️ API Modules</a></li>
                    <li><a href="annotated.html">📋 Classes & Structs</a></li>
                    <li><a href="files.html">📁 Header Files</a></li>
                    <li><a href="examples.html">💡 Code Examples</a></li>
                </ul>
            </div>
        </body>
        </html>
        EOF

    - name: Setup Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/configure-pages@v4

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/generated/html/
        retention-days: 90

    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/generated/html/

  #============================================================================
  # Deploy to GitHub Pages (only on main branch)
  #============================================================================
  deploy-pages:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-22.04
    needs: generate-docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Create deployment summary
      run: |
        echo "🚀 **Documentation Deployed Successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📖 **Live Documentation:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 What's Available:" >> $GITHUB_STEP_SUMMARY
        echo "- 🏠 [Main Page](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- 🗂️ [API Modules](${{ steps.deployment.outputs.page_url }}modules.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 [Classes & Structs](${{ steps.deployment.outputs.page_url }}annotated.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 📁 [Header Files](${{ steps.deployment.outputs.page_url }}files.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 [Search Functionality](${{ steps.deployment.outputs.page_url }}search.html)" >> $GITHUB_STEP_SUMMARY

  #============================================================================
  # Documentation Quality Report
  #============================================================================
  quality-report:
    name: Documentation Quality Report
    runs-on: ubuntu-22.04
    needs: generate-docs
    if: always()
    
    steps:
    - name: Download documentation artifact
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/

    - name: Generate quality metrics
      run: |
        echo "📊 **Documentation Quality Report**" >> $GITHUB_STEP_SUMMARY
        echo "=================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count files and content
        html_files=$(find docs -name "*.html" | wc -l)
        css_files=$(find docs -name "*.css" | wc -l)
        js_files=$(find docs -name "*.js" | wc -l)
        total_size=$(du -sh docs 2>/dev/null | cut -f1 || echo "unknown")
        
        echo "### 📈 **Metrics:**" >> $GITHUB_STEP_SUMMARY
        echo "- **HTML Files:** $html_files" >> $GITHUB_STEP_SUMMARY
        echo "- **CSS Files:** $css_files" >> $GITHUB_STEP_SUMMARY
        echo "- **JavaScript Files:** $js_files" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Size:** $total_size" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for key sections
        echo "### ✅ **Quality Checks:**" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "docs/index.html" ]; then
          echo "- ✅ Main page generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Main page missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "docs/modules.html" ]; then
          echo "- ✅ Module documentation generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Module documentation missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "docs/annotated.html" ]; then
          echo "- ✅ Class documentation generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Class documentation missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for search functionality
        if [ -f "docs/search.html" ] || [ -f "docs/searchdata.js" ]; then
          echo "- ✅ Search functionality enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Search functionality not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 **Documentation Status:** ${{ needs.generate-docs.result == 'success' && '✅ SUCCESS' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
